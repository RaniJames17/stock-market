import React from 'react';
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Chip,
  Alert,
  Paper,
  LinearProgress,
  Stack,
} from '@mui/material';
import {
  TrendingUp,
  TrendingDown,
  TrendingFlat,
  Psychology,
} from '@mui/icons-material';

const PredictionResults = ({ predictions, loading }) => {
  if (loading) {
    return (
      <Box>
        <Typography variant="h5" gutterBottom>
          <Psychology sx={{ mr: 1, verticalAlign: 'middle' }} />
          AI Predictions
        </Typography>
        <Paper variant="outlined" sx={{ p: 2, textAlign: 'center' }}>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
            Training neural network...
          </Typography>
          <LinearProgress />
        </Paper>
      </Box>
    );
  }

  if (!predictions || predictions.length === 0) {
    return (
      <Box>
        <Typography variant="h5" gutterBottom>
          <Psychology sx={{ mr: 1, verticalAlign: 'middle' }} />
          AI Predictions
        </Typography>
        <Alert severity="info">
          No predictions yet. Add stock data and train the model to see predictions.
        </Alert>
      </Box>
    );
  }

  const getTrendIcon = (current, previous) => {
    if (!previous) return <TrendingFlat />;
    if (current > previous) return <TrendingUp color="success" />;
    if (current < previous) return <TrendingDown color="error" />;
    return <TrendingFlat />;
  };

  const getTrendColor = (current, previous) => {
    if (!previous) return 'default';
    if (current > previous) return 'success';
    if (current < previous) return 'error';
    return 'default';
  };

  const getConfidenceColor = (confidence) => {
    if (confidence >= 80) return 'success';
    if (confidence >= 60) return 'warning';
    return 'error';
  };

  return (
    <Box>
      <Typography variant="h5" gutterBottom>
        <Psychology sx={{ mr: 1, verticalAlign: 'middle' }} />
        AI Predictions
      </Typography>
      
      <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
        Neural network predictions for the next {predictions.length} days
      </Typography>

      <List>
        {predictions.map((prediction, index) => {
          const previousPrice = index > 0 ? predictions[index - 1].price : null;
          const changePercent = previousPrice 
            ? (((prediction.price - previousPrice) / previousPrice) * 100).toFixed(2)
            : null;

          return (
            <ListItem key={index} sx={{ px: 0 }}>
              <Paper variant="outlined" sx={{ width: '100%', p: 2 }}>
                <Stack direction="row" justifyContent="space-between" alignItems="center">
                  <Box>
                    <ListItemIcon sx={{ minWidth: 40 }}>
                      {getTrendIcon(prediction.price, previousPrice)}
                    </ListItemIcon>
                    <ListItemText
                      primary={
                        <Typography variant="h6">
                          ${prediction.price}
                          {changePercent && (
                            <Typography 
                              variant="body2" 
                              component="span" 
                              color={getTrendColor(prediction.price, previousPrice)}
                              sx={{ ml: 1 }}
                            >
                              ({changePercent > 0 ? '+' : ''}{changePercent}%)
                            </Typography>
                          )}
                        </Typography>
                      }
                      secondary={
                        <Typography variant="body2" color="text.secondary">
                          {new Date(prediction.date).toLocaleDateString('en-US', {
                            weekday: 'short',
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric',
                          })}
                        </Typography>
                      }
                    />
                  </Box>
                  <Box sx={{ textAlign: 'right' }}>
                    <Chip
                      label={`${prediction.confidence}% confidence`}
                      size="small"
                      color={getConfidenceColor(prediction.confidence)}
                      variant="outlined"
                    />
                  </Box>
                </Stack>
              </Paper>
            </ListItem>
          );
        })}
      </List>

      <Alert severity="warning" sx={{ mt: 2 }}>
        <Typography variant="body2">
          <strong>Disclaimer:</strong> These predictions are generated by a neural network for educational purposes. 
          They should not be used for actual investment decisions. Stock market predictions are inherently uncertain.
        </Typography>
      </Alert>
    </Box>
  );
};

export default PredictionResults;
